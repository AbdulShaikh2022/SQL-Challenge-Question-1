Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
The CountryCode for America is USA.

Anwser- SELECT *
FROM CITY
WHERE POPULATION > 100000 AND COUNTRYCODE =USA

Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
The CountryCode for America is USA.
Answer-SELECT NAME 
FROM CITY
WHERE COUNTRYCODE = "USA" AND POPULATION > 120000;

Q3. Query all columns (attributes) for every row in the CITY table.
Answer - SELECT * FROM CITY;

Q4. Query all columns for a city in CITY with the ID 1661.
Answer- SELECT * FROM CITY WHERE ID = 1661; 

Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is
JPN.
Answer- SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';       
 
Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is
JPN.
Answer- SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';   

Q7. Query a list of CITY and STATE from the STATION table.
Answer - SELECT CITY,STATE FROM STATION;   

Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.

Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.
Answer-

Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically.
Answer - select city, length(city) from station order by length(city) DESC,city ASC fetch first row only;
select city, length(city) from station order by length(city) asc ,city asc fetch first row only;      

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
cannot contain duplicates.
Answer-SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' 
OR CITY LIKE 'U%' ORDER BY CITY ASC;  

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
contain duplicates.
Answer- SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' 
OR CITY LIKE '%u';   

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
contain duplicates.
Answer- SELECT DISTINCT CITY FROM STATION WHERE upper(SUBSTR(CITY,1,1)) NOT IN ('A','E','I','O','U') AND lower(SUBSTR(CITY,1,1)) NOT IN
('a','e','i','o','u'); 

Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
contain duplicates.
Anwser- SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');   

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.
Answer- SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');   

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates.
Answer- SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');   

Q17 Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.
Answer- SELECT product_id, 
       product_name 
FROM   product 
WHERE  product_id NOT IN (SELECT product_id 
                          FROM   sales 
                          WHERE  sale_date NOT BETWEEN 
                                 '2019-01-01' AND '2019-03-31'); 

Q18. Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.
Answer- select distinct author_id
from article_views
where author_id = viewer_id

Q19.Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.
Answer- select count(*)*100.0/b.total as immdediate_percentage from Delivery a, 
(select count(*) as total from Delivery) b
where a.order_date = a.customer_pref_delivery_date;

Q20.Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
Answer- select ad_id,
ifnull(
    round(
        avg(
            case
                when action = "Clicked" then 1
                when action = "Viewed" then 0
                else null
            end
        ) * 100,
    2),
0)
as ctr
from Ads
group by ad_id
order by ctr desc, ad_id asc;

Q21 Write an SQL query to find the team size of each of the employees
Answer - SELECT employee_id, COUNT(team_id) OVER (PARTITION BY team_id) team_size
FROM Employee

Q22 Write an SQL query to find the type of weather in each country for November 2019.
The type of weather is:
● Cold if the average weather_state is less than or equal 15,
● Hot if the average weather_state is greater than or equal to 25, and
● Warm otherwise.
Answer -SELECT
c.country_name,
CASE (
    WHEN AVG(w.weather_state) <= 15 THEN 'Cold'
    WHEN AVG(w.weather_state) >= 25 THEN 'Hot' 
    'Warm' END ) AS weather_type
FROM
Weather w
INNER JOIN 
Countries c
ON 
w.country_id = c.country_id
WHERE
LEFT(w.day, 7) = '2019-11'
GROUP BY c.country_name;

Q23 -Write an SQL query to find the average selling price for each product. average_price should be
rounded to 2 decimal places.
Anwser- select product_id, ifnull(round(sum(prices_sum) / sum(units), 2), 0) as average_price
    from (
        select p.product_id as product_id, units, price * units as prices_sum
            from Prices p left join UnitsSold u
            on p.product_id = u.product_id and purchase_date between start_date and end_date
    ) as temp
    group by product_id;

Q24.Write an SQL query to report the first login date for each player.
Answer- select player_id, min(event_date) as first_login
from Activity 
group by player_id

Q25.Write an SQL query to report the device that is first logged in for each player
Answer -select player_id, min(event_date) as first_login
from Activity 
group by player_id

Q26- Write an SQL query to get the names of products that have at least 100 units ordered in February 2020
and their amount.
Answer- select a.product_name, sum(unit) as unit
from Products a
left join Orders b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_id
having sum(unit) >= 100

Q27- Write an SQL query to find the users who have valid emails
Answer - select * 
from Users
where  mail regexp '^[A-Za-z][A-Za-z0-9\_\.\-]*@leetcode\.com$'

Q28 -Write an SQL query to report the customer_id and customer_name of customers who have spent at
least $100 in each month of June and July 2020.
Answer- select o.customer_id, c.name
from Customers c, Product p, Orders o
where c.customer_id = o.customer_id and p.product_id = o.product_id
group by o.customer_id
having 
(
    sum(case when o.order_date like '2020-06%' then o.quantity*p.price else 0 end) >= 100
    and
    sum(case when o.order_date like '2020-07%' then o.quantity*p.price else 0 end) >= 100

Q29 Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.
Return the result table in any order.
Answer- select distinct title
from Content 
join TVProgram using(content_id)
where kids_content = 'Y' 
	and content_type = 'Movies' 
	and (month(program_date), year(program_date)) = (6, 2020)

Q30 -Write an SQL query to find the npv of each query of the Queries table.
Return the result table in any order.
Answer- select q.id, q.year, ifnull(n.npv,0) as npv
from queries as q
left join npv as n
on (q.id, q.year) = (n.id, n.year)

Q31- Write an SQL query to find the npv of each query of the Queries table.
Answer- select q.id, q.year, ifnull(n.npv,0) as npv
from queries as q
left join npv as n
on (q.id, q.year) = (n.id, n.year)

Q32- Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just
show null.
Answer- select unique_id, name
from Employees
left join EmployeeUNI
on if (Employees.id = EmployeeUNI.id, Employees.id, null)

Q33- Write an SQL query to report the distance travelled by each user.
Return the result table ordered by travelled_distance in descending order, if two or more users
travelled the same distance, order them by their name in ascending order
Anwser- select name, sum(ifnull(distance, 0)) as travelled_distance
from rides r
right join users u
on r.user_id = u.id
group by name
order by 2 desc,1 asc;

Q34- Write an SQL query to get the names of products that have at least 100 units ordered in February 2020
and their amount.
Answer- select a.product_name, sum(unit) as unit
from Products a
left join Orders b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_id
having sum(unit) >= 100

Q35 -Find the name of the user who has rated the greatest number of movies. In case of a tie,
return the lexicographically smaller user name.
Answer- (select name results
from Users
left join Movie_Rating
using (user_id)
group by user_id
order by count(rating) desc, name
limit 1)

union

(select title
from Movies
left join Movie_Rating
using(movie_id)
where left(created_at,7) = '2020-02'
group by movie_id
order by avg(rating) desc, title
limit 1)

Q37 - Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just
show null.
Answer- select unique_id, name
from Employees
left join EmployeeUNI
on if (Employees.id = EmployeeUNI.id, Employees.id, null)

Q 38 -Write an SQL query to find the id and the name of all students who are enrolled in departments that no
longer exist.
Answer- 
select s.id, s.name
from students s
left join departments d
on s.department_id = d.id
where d.id is null

Q39 - Write an SQL query to report the number of calls and the total call duration between each pair of
distinct persons (person1, person2) where person1 < person2.
Answer- select from_id as person1,to_id as person2,
    count(duration) as call_count, sum(duration) as total_duration
from (select * 
      from Calls 
      
      union all
      
      select to_id, from_id, duration 
      from Calls) t1
where from_id < to_id
group by person1, person2

Q40 -SELECT a.product_id
	, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price
FROM UnitsSold a
	JOIN Prices b
	ON (a.product_id = b.product_id
		AND a.purchase_date >= b.start_date
		AND a.purchase_date <= b.end_date)
group by product_id
Answer-  SELECT a.product_id
	, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price
FROM UnitsSold a
	JOIN Prices b
	ON (a.product_id = b.product_id
		AND a.purchase_date >= b.start_date
		AND a.purchase_date <= b.end_date)
group by product_id

Q41- Write an SQL query to report the number of cubic feet of volume the inventory occupies in each
warehouse.
Answer- select name as warehouse_name, sum(units * vol) as volume
from Warehouse w
join (select product_id, Width*Length*Height as vol
     from Products) p
on w.product_id = p.product_id
group by name

Q 42 - Write an SQL query to report the difference between the number of apples and oranges sold each day.
Return the result table ordered by sale_date.
Answer- create table Sales(sale_date date, fruit char, sold_num int);
insert into Sales values('2020-05-01', 'apples', 10);
insert into Sales values('2020-05-01', 'oranges', 8);

select a.sale_date, a.sold_num - b.sold_num
from Sales a left join Sales b
on a.sale_date = b.sale_date
where a.fruit = 'apples' and b.fruit = 'oranges'

Q 44 Write an SQL query to report the managers with at least five direct reports.
Return the result table in any order.
Answer- select 
    a.name 
from 
    employee a 
inner join 
    employee b 
on (a.id = b.managerid) 
group by a.name 
having count(distinct b.id) >= 5

Q45 Write an SQL query to report the respective department name and number of students majoring in
each department for all departments in the Department table (even ones with no current students).
Anser- select 
    a.dept_name,
    coalesce(count(student_id), 0) student_number
from 
    department a 
left join
    student b
on 
    (a.dept_id = b.dept_id)
group by a.dept_name
order by student_number desc, a.dept_name asc;

Q46 -Write an SQL query to report the customer ids from the Customer table that bought all the products in
the Product table.
Answer- SELECT
    customer_id
FROM customer
GROUP BY customer_id
HAVING COUNT( DISTINCT product_key) = (SELECT COUNT(*) FROM product) 

Q47 -Write an SQL query that reports the most experienced employees in each project. In case of a tie,
report all employees with the maximum number of experience years.
Answer- select project_id, employee_id
from Project
join Employee
using (employee_id)
where (project_id, experience_years) in (
    select project_id, max(experience_years)
    from Project
    join Employee
    using (employee_id)
    group by project_id)

Q48 -Write an SQL query that reports the books that have sold less than 10 copies in the last year,
excluding books that have been available for less than one month from today. Assume today is
2019-06-23.
Answer -select book_id, name 
from books
where book_id not in (
    select book_id 
    from orders 
    where (dispatch_date between date_sub('2019-06-23',interval 1 year) and '2019-06-23') 
    group by (book_id) 
    having sum(quantity) >= 10)
and 
    available_from < date_sub('2019-06-23', interval 1 month)


Q49 - Write a SQL query to find the highest grade with its corresponding course for each student. In case of
a tie, you should find the course with the smallest course_id. 
Answer-select student_id, min(course_id) as course_id, grade
from Enrollments
where (student_id, grade) in 
    (select student_id, max(grade)
    from Enrollments
    group by student_id)
group by student_id, grade
order by student_id asc

Q50 - Write an SQL query to find the winner in each group.
Return the result table in any order.

Answer-SELECT group_id, 
       player_id 
FROM   (SELECT p.group_id, 
               ps.player_id, 
               Sum(ps.score) AS score 
        FROM   players p INNER JOIN
               (SELECT first_player AS player_id, 
                       first_score  AS score 
                FROM   matches 
                UNION ALL 
                SELECT second_player AS player_id,
                       second_score  AS score
                FROM   matches) ps 
        ON  p.player_id = ps.player_id 
        GROUP  BY ps.player_id 
        ORDER  BY group_id, 
                  score DESC, 
                  player_id) top_scores 
GROUP  BY group_id 